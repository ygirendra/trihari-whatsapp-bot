// api/webhook.js
// Vercel serverless function: handles WhatsApp verification (GET) + messages (POST)
// Saves doctor/lab intents to Supabase and replies on WhatsApp.

import { createClient } from "@supabase/supabase-js";

// ====== ENV (set these on Vercel ‚Üí Project ‚Üí Settings ‚Üí Environment Variables) ======
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY; // server-only!
const WHATSAPP_TOKEN = process.env.WHATSAPP_TOKEN;
const PHONE_NUMBER_ID = process.env.PHONE_NUMBER_ID;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN || "trihari_webhook_verify";
const GRAPH_API_VERSION = process.env.GRAPH_API_VERSION || "v19.0";

// ====== Supabase client (server-side) ======
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

// ====== Your data (from your original Python) ======
const doctors = [
  {"name":"‡§°‡§æ. ‡§ï‡§ø‡§∂‡•ã‡§∞ ‡§ï‡•Å‡§Æ‡§æ‡§∞ ‡§™‡•å‡§°‡•á‡§≤","degree":"MBBS, DMRD (CMC VELLORE)","speciality":"‡§µ‡§∞‡§ø‡§∑‡•ç‡§† ‡§∞‡•á‡§°‡§ø‡§Ø‡•ã‡§≤‡•ã‡§ú‡§ø‡§∑‡•ç‡§ü","nmc":"13362","time":"‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§¶‡§ø‡§® ‡§µ‡§ø‡§π‡§æ‡§® ‡•Æ:‡•¶‡•¶ ‡§¨‡§ú‡•á ‡§∞ ‡§¨‡•á‡§≤‡•Å‡§ï‡§æ ‡•™:‡•¶‡•¶ ‡§¨‡§ú‡•á ‡§¶‡•á‡§ñ‡§ø"},
  {"name":"‡§°‡§æ. ‡§¨‡§∞‡•Å‡§£ ‡§Ö‡§ó‡•ç‡§∞‡§µ‡§æ‡§≤","degree":"MBBS, MD (BPKIHS)","speciality":"‡§µ‡§∞‡§ø‡§∑‡•ç‡§† ‡§®‡§µ‡§ú‡§æ‡§§ ‡§∂‡§ø‡§∂‡•Å ‡§§‡§•‡§æ ‡§¨‡§æ‡§≤ ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û","nmc":"15375","time":"‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§¶‡§ø‡§® ‡§µ‡§ø‡§π‡§æ‡§® ‡•®:‡•©‡•¶ ‡§¨‡§ú‡•á ‡§¶‡•á‡§ñ‡§ø"},
  {"name":"‡§°‡§æ. ‡§∂‡§ø‡§µ‡•á‡§∏ ‡§ö‡•å‡§ß‡§∞‡•Ä","degree":"MBBS, MS (BPKIHS)","speciality":"‡§µ‡§∞‡§ø‡§∑‡•ç‡§† ‡§∏‡•ç‡§§‡•ç‡§∞‡•Ä ‡§§‡§•‡§æ ‡§™‡•ç‡§∞‡§∏‡•Ç‡§§‡§ø ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û","nmc":"16367","time":"‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∂‡§®‡§ø‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§π‡§æ‡§® ‡•ß‡•®:‡•¶‡•¶ ‡§¨‡§ú‡•á ‡§¶‡•á‡§ñ‡§ø"},
  {"name":"‡§°‡§æ. ‡§¶‡§ø‡§≤‡§ø‡§™ ‡§ó‡•Å‡§™‡•ç‡§§‡§æ","degree":"MBBS (BPKIHS), MD (BPKIHS)","speciality":"‡§µ‡§∞‡§ø‡§∑‡•ç‡§† ‡§´‡§ø‡§ú‡§ø‡§∏‡§ø‡§Ø‡§®","nmc":"17431","time":"‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∂‡§®‡§ø‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§π‡§æ‡§® ‡•® ‡§¨‡§ú‡•á ‡§∞ ‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§π‡§æ‡§® ‡•Æ ‡§¨‡§ú‡•á"},
  {"name":"‡§°‡§æ. ‡§∞‡§ø‡§§‡•á‡§∂ ‡§•‡§™‡§≤‡§ø‡§Ø‡§æ","degree":"MBBS MS (BPKIHS)","speciality":"‡§µ‡§∞‡§ø‡§∑‡•ç‡§† ‡§π‡§æ‡§° ‡§ú‡•ã‡§∞‡•ç‡§®‡•Ä ‡§§‡§•‡§æ ‡§®‡§∏‡§æ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û","nmc":"14215","time":"‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∂‡§®‡§ø‡§µ‡§æ‡§∞ ‡§∞ ‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§π‡§æ‡§® ‡•Æ:‡•¶‡•¶ ‡§¨‡§ú‡•á"},
  {"name":"‡§°‡§æ. ‡§∂‡§∂‡§æ‡§Ç‡§ï‡§∞‡§æ‡§ú ‡§™‡•ã‡§ñ‡§∞‡•á‡§≤","degree":"MBBS, MD (BPKIHS)","speciality":"‡§µ‡§∞‡§ø‡§∑‡•ç‡§† ‡§ü‡§æ‡§â‡§ï‡•ã, ‡§®‡§∏‡§æ‡§∞‡•ã‡§ó ‡§§‡§•‡§æ ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û","nmc":"14450","time":"‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∂‡§®‡§ø‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§π‡§æ‡§® ‡•ß:‡•©‡•¶ ‡§¨‡§ú‡•á ‡§¶‡•á‡§ñ‡§ø"},
  {"name":"‡§°‡§æ. ‡§™‡•ã‡§∑‡§£ ‡§§‡•ç‡§∞‡§ø‡§™‡§æ‡§†‡•Ä","degree":"MBBS (IOM) MDGP (BPKIHS)","speciality":"‡§µ‡§∞‡§ø‡§∑‡•ç‡§† ‡§´‡•á‡§Æ‡§ø‡§≤‡•Ä ‡§´‡§ø‡§ú‡§ø‡§∏‡§ø‡§Ø‡§®","nmc":"4783","time":"‡§¶‡•à‡§®‡§ø‡§ï ‡§¨‡•á‡§≤‡•Å‡§ï‡§æ ‡•´ ‡§¨‡§ú‡•á ‡§¶‡•á‡§ñ‡§ø"},
  {"name":"‡§°‡§æ. ‡§®‡§ø‡§∏‡•ç‡§§‡•Å‡§ï ‡§¨‡§∞‡§æ‡§≤","degree":"MBBS. MD (KU)","speciality":"‡§µ‡§∞‡§ø‡§∑‡•ç‡§† ‡§õ‡§æ‡§≤‡§æ, ‡§ï‡•Å‡§∑‡•ç‡§†, ‡§Ø‡•å‡§® ‡§§‡§•‡§æ ‡§∏‡•å‡§®‡•ç‡§¶‡§∞‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û","nmc":"16919","time":"‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞ ‡•©:‡•¶‡•¶ ‡§¨‡§ú‡•á ‡§¶‡•á‡§ñ‡§ø"},
  {"name":"‡§°‡§æ. ‡§∂‡§ø‡§µ ‡§≠‡•Ç‡§∑‡§£ ‡§™‡§£‡•ç‡§°‡§ø‡§§","degree":"MBBS(TU), MS(KU)","speciality":"‡§µ‡§∞‡§ø‡§∑‡•ç‡§† ‡§®‡§æ‡§ï, ‡§ï‡§æ‡§®, ‡§ò‡§æ‡§Å‡§ü‡•Ä ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û","nmc":"16947","time":"‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∂‡§®‡§ø‡§µ‡§æ‡§∞ ‡§µ‡§ø‡§π‡§æ‡§® ‡•®:‡•©‡•¶ ‡§¨‡§ú‡•á ‡§¶‡•á‡§ñ‡§ø"},
  {"name":"‡§°‡§æ. ‡§ó‡•Ä‡§∞‡•á‡§®‡•ç‡§¶‡•ç‡§∞ ‡§Ø‡§æ‡§¶‡§µ","degree":"MBBS, BPKIHS DHARAN","speciality":"‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§Ö‡§´‡§ø‡§∏‡§∞","nmc":"32439","time":"‡•®‡•™ ‡§∏‡•à ‡§ò‡§£‡•ç‡§ü‡§æ ‡§∏‡•á‡§µ‡§æ"}
];

const lab_tests = {
  "CBC": 300,
  "Lipid Profile": 800,
  "Blood Sugar (Fasting)": 100,
  "Thyroid Function Test": 1000,
  "RFT ‡§ï‡§ø‡§°‡•ç‡§®‡•Ä‡§ï‡•ã ‡§ú‡§æ‡§Å‡§ö (Kidney Function)": 900,
  "LFT ‡§ï‡§æ‡§≤‡•á‡§ú‡•ã‡§Ç ‡§ú‡§æ‡§Å‡§ö": 900,
  "USG Abdomen Pelvis": 1000,
  "Other Test": "Please request the test you want. Prices are based according to market."
};

// ====== Auto-reply logic ======
function autoReply(message) {
  const m = (message || "").toLowerCase();
  const isDoctor = m.includes("doctor") || m.includes("appointment") || m.includes("‡§Ö‡§™‡•ç‡§µ‡§æ‡§á‡§®‡•ç‡§ü") || m.includes("‡§°‡§æ‡§ï‡•ç‡§ü‡§∞");
  const isLab = m.includes("lab") || m.includes("test") || m.includes("‡§ú‡§æ‡§Å‡§ö") || m.includes("‡§ü‡•á‡§∏‡•ç‡§ü");

  if (isDoctor) {
    let reply = "üìÖ ‡§°‡§æ‡§ï‡•ç‡§ü‡§∞‡§π‡§∞‡•Ç‡§ï‡•ã ‡§∏‡§Æ‡§Ø‡§§‡§æ‡§≤‡§ø‡§ï‡§æ:\n\n";
    for (const d of doctors) {
      reply += `‚û°Ô∏è ${d.name}\n- ${d.speciality}\n- ${d.degree}\n- ‡§∏‡§Æ‡§Ø: ${d.time}\n- NMC: ${d.nmc}\n\n`;
    }
    reply += "‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•Å‡§® ‡§°‡§æ‡§ï‡•ç‡§ü‡§∞‡§∏‡§Å‡§ó appointment ‡§ö‡§æ‡§π‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ ‡§≠‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§";
    return reply;
  }

  if (isLab) {
    let reply = "üß™ ‡§≤‡•ç‡§Ø‡§æ‡§¨ ‡§ú‡§æ‡§Å‡§ö‡§π‡§∞‡•Ç ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø:\n\n";
    for (const [test, price] of Object.entries(lab_tests)) {
      reply += typeof price === "number" ? `- ${test}: ‡§∞‡•Å ${price}\n` : `- ${test}: ${price}\n`;
    }
    reply += "\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•Å‡§® test ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø appointment ‡§ö‡§æ‡§π‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ ‡§≠‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§";
    return reply;
  }

  if (m.includes("hello") || m.includes("hi") || m.includes("‡§®‡§Æ‡§∏‡•ç‡§§‡•á")) {
    return "üëã ‡§§‡•ç‡§∞‡§ø‡§π‡§∞‡•Ä ‡§™‡•ã‡§≤‡§ø‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï ‡§∞ ‡§°‡§æ‡§Ø‡§ó‡•ç‡§®‡•ã‡§∏‡•ç‡§ü‡§ø‡§ï ‡§∏‡•á‡§®‡•ç‡§ü‡§∞‡§Æ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§õ!\n‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡•á ‡§°‡§æ‡§ï‡•ç‡§ü‡§∞, ‡§Ö‡§™‡•ç‡§µ‡§æ‡§á‡§®‡•ç‡§ü‡§Æ‡•á‡§®‡•ç‡§ü, ‡§µ‡§æ ‡§≤‡•ç‡§Ø‡§æ‡§¨ ‡§ú‡§æ‡§Å‡§ö‡§ï‡•ã ‡§¨‡§æ‡§∞‡•á‡§Æ‡§æ ‡§∏‡•ã‡§ß‡•ç‡§® ‡§∏‡§ï‡•ç‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ‡•§";
  }

  return "‡§Æ‡§æ‡§´ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç, ‡§Æ‡•à‡§≤‡•á ‡§¨‡•Å‡§ù‡§ø‡§®‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ '‡§°‡§æ‡§ï‡•ç‡§ü‡§∞', '‡§Ö‡§™‡•ç‡§µ‡§æ‡§á‡§®‡•ç‡§ü‡§Æ‡•á‡§®‡•ç‡§ü', ‡§µ‡§æ '‡§≤‡•ç‡§Ø‡§æ‡§¨ ‡§ú‡§æ‡§Å‡§ö' ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§∏‡•ã‡§ß‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§";
}

function guessType(message) {
  const m = (message || "").toLowerCase();
  if (m.includes("doctor") || m.includes("appointment") || m.includes("‡§Ö‡§™‡•ç‡§µ‡§æ‡§á‡§®‡•ç‡§ü") || m.includes("‡§°‡§æ‡§ï‡•ç‡§ü‡§∞")) return "Doctor";
  if (m.includes("lab") || m.includes("test") || m.includes("‡§ú‡§æ‡§Å‡§ö") || m.includes("‡§ü‡•á‡§∏‡•ç‡§ü")) return "Lab Test";
  return "Other";
}

async function saveBooking({ phone, message }) {
  const type = guessType(message);
  if (type === "Other") return;

  const booking_id = `BK-${(phone || "").slice(-4)}-${Math.floor(Date.now() / 1000)}`;
  const { error } = await supabase.from("bookings").insert({
    booking_id,
    phone,
    details: (message || "").slice(0, 200),
    status: "Pending",
    type
  });
  if (error) console.error("Supabase insert error:", error);
}

async function sendWhatsAppMessage(to, text) {
  try {
    const url = `https://graph.facebook.com/${GRAPH_API_VERSION}/${PHONE_NUMBER_ID}/messages`;
    const resp = await fetch(url, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${WHATSAPP_TOKEN}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        messaging_product: "whatsapp",
        to,
        text: { body: text }
      })
    });
    if (!resp.ok) {
      const body = await resp.text();
      console.error("WhatsApp send error:", resp.status, body);
    }
  } catch (e) {
    console.error("WhatsApp send exception:", e);
  }
}

// ====== Vercel handler ======
export default async function handler(req, res) {
  // 1) Verification (GET)
  if (req.method === "GET") {
    const mode = req.query["hub.mode"];
    const token = req.query["hub.verify_token"];
    const challenge = req.query["hub.challenge"];
    if (mode === "subscribe" && token === VERIFY_TOKEN) {
      return res.status(200).send(challenge);
    }
    return res.status(403).send("Forbidden");
  }

  // 2) Webhook events (POST)
  if (req.method === "POST") {
    try {
      const data = typeof req.body === "string" ? JSON.parse(req.body) : (req.body || {});
      console.log("Incoming:", JSON.stringify(data));

      const change = data?.entry?.[0]?.changes?.[0]?.value;
      const messages = change?.messages || [];
      const contacts = change?.contacts || [];

      if (messages.length && contacts.length) {
        const phone = contacts[0]?.wa_id;
        const msgObj = messages[0];

        // Pull message text from several possible shapes
        let userMessage = "";
        if (msgObj?.text?.body) userMessage = msgObj.text.body;
        else if (msgObj?.button?.text) userMessage = msgObj.button.text;
        else if (msgObj?.interactive?.type === "button_reply")
          userMessage = msgObj?.interactive?.button_reply?.title || msgObj?.interactive?.button_reply?.id || "";
        else if (msgObj?.interactive?.type === "list_reply")
          userMessage = msgObj?.interactive?.list_reply?.title || msgObj?.interactive?.list_reply?.id || "";

        const replyText = autoReply(userMessage);

        // Save only Doctor/Lab intents
        await saveBooking({ phone, message: userMessage });

        // Send reply back on WhatsApp
        await sendWhatsAppMessage(phone, replyText);
      }

      // Always 200 quickly
      return res.status(200).json({ status: "EVENT_RECEIVED" });
    } catch (e) {
      console.error("Webhook POST error:", e);
      return res.status(200).json({ status: "ignored" });
    }
  }

  res.setHeader("Allow", "GET, POST");
  return res.status(405).send("Method Not Allowed");
}
